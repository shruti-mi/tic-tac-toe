{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/Game.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","timeInHistory","slice","current","localboard","textAlign","padding","_step","move","destination","step","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAEA,IAAMA,EAAQ,CACbC,WAAY,YACTC,OAAQ,iBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAUEC,EANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OACd,4BAAQT,MAAOA,EAAOS,QAASA,GAC7BD,ICXGR,EAAQ,CACbE,OAAQ,iBACLQ,aAAc,MACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAYHC,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASR,EAAZ,EAAYA,QAAZ,OACb,yBAAKT,MAAOA,GACViB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACZ,kBAAC,EAAD,CAAQC,IAAOD,EAAGZ,MAASW,EAAQV,QAAW,kBAAMA,EAAQW,WC2ChDE,EAxDF,WAAO,IAAD,EAEYC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QAFpC,mBAEXC,EAFW,KAEFC,EAFE,OAGkBJ,mBAAS,GAH3B,mBAGXK,EAHW,KAGCC,EAHD,OAIYN,oBAAS,GAJrB,mBAIXO,EAJW,KAIFC,EAJE,KAKZC,ECPA,SAAyBf,GAa/B,IAZA,IAAMgB,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACJ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIHb,EAAI,EAAIA,EAAIa,EAAMC,SAAWd,EAAG,CAAC,IAAD,cACrBa,EAAMb,GADe,GAChCe,EADgC,KAC7BC,EAD6B,KAC1BC,EAD0B,KAGvC,GAAGpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACpE,OAAOpB,EAAQkB,GAEjB,OAAO,KDZQG,CAAgBZ,EAAQE,IAwCvC,OACC,oCACC,kBAAC,EAAD,CAAOnB,QAvCW,SAACW,GACpB,IAAMmB,EAAgBb,EAAQc,MAAM,EAAGZ,EAAW,GAC5Ca,EAAUF,EAAcX,GACxBc,EAAU,YAAOD,GAEpBT,GAAUU,EAAWtB,KAGxBsB,EAAWtB,GAAKU,EAAU,IAAM,IAEhCH,EAAW,GAAD,mBAAKY,GAAL,CAAoBG,KAC9BX,GAAYD,GACZD,EAAcU,EAAcL,UA2BIjB,QAAWS,EAAQE,KAClD,yBAAK5B,MARO,CACb2C,UAAW,SACXC,QAAS,QAOF,2BAAIZ,EAAS,WAAaA,EAAS,iBAAmBF,EAAU,IAAM,MAnBvEJ,EAAQR,KAAI,SAAC2B,EAAOC,GAChB,IAAMC,EAAcD,EAAI,sBAAkBA,GAAS,cACnD,OACI,wBAAIzB,IAAKyB,GACL,4BAAQrC,QAAS,kBATnCoB,EADemB,EAUiCF,QARhDf,EAAWiB,EAAK,IAAM,GAFR,IAACA,IAUyCD,UEhC3CE,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.26546207.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n\tbackground: 'lightblue',\n    border: '3px solid blue',\n    fontSize: '30px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n}\n\n\nconst Square = ({value, onClick }) => (\n\t<button style={style} onClick={onClick}>\n\t\t{value}\n\t</button>\n)\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n \nconst style = {\n\tborder: '4px solid blue',\n    borderRadius: '8px',\n    width: '300px',\n    height: '300px',\n    margin: '0 auto',\n    display: 'grid',\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\n};\n\n\nconst Board = ({ squares, onClick }) => (\n\t<div style={style}>\n\t\t{squares.map((square, i) => (\n\t\t\t<Square key = {i} value = {square} onClick = {() => onClick(i)}/>\n\t\t))}\n\t</div>\n)\n\nexport default Board;","import React, { useState } from 'react';\nimport { calculateWinner } from '../helper';\nimport Board from './Board';\n\nconst Game = () => {\n\n\tconst [history, setHistory] = useState([Array(9).fill(null)]);\n\tconst [stepNumber, setStepNumber] = useState(0);\n\tconst [xIsNext, setXisNext] = useState(true);\n\tconst winner = calculateWinner(history[stepNumber]);\n\n\n\tconst handleClick = (i) => {\n\t\tconst timeInHistory = history.slice(0, stepNumber+1);\n\t\tconst current = timeInHistory[stepNumber];\n\t\tconst localboard = [...current];\n\n\t\tif(winner || localboard[i])\n\t\t\treturn;\t// already win or clicked\n\n\t\tlocalboard[i] = xIsNext ? 'X' : 'O';\n\n\t\tsetHistory([...timeInHistory, localboard]);\n\t\tsetXisNext(!xIsNext);\n\t\tsetStepNumber(timeInHistory.length);\n\n\t}\n\n\tconst jumpTo = (step) => {\n\t\tsetStepNumber(step);\n\t\tsetXisNext(step%2 === 0);\n\t}\n\n\tconst renderMoves = () => (\n        history.map((_step, move) => {\n            const destination = move ? `Go to move #${move}` : 'Go to start';\n            return (\n                <li key={move}>\n                    <button onClick={() => jumpTo(move)}>{destination}</button>\n                </li>\n            )\n        })        \n    )\n\n\tconst style = {\n\t\ttextAlign: \"center\",\n\t\tpadding: \"5px\"\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Board onClick = {handleClick} squares = {history[stepNumber]}/>\n\t\t\t<div style = {style}>\n\t\t      \t<p>{winner ? \"Winner: \" + winner : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}</p>\n\t\t    \t{renderMoves()}\n\t\t    </div>\n\t\t</>\n\t)\n}\n\nexport default Game;","import React from 'react';\n\nexport function calculateWinner(squares) {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t    [6, 7, 8],\n\t    [0, 3, 6],\n\t    [1, 4, 7],\n\t    [2, 5, 8],\n\t    [0, 4, 8],\n\t    [2, 4, 6]\n\t]; \t// possible winning moves\n\n\n\tfor(let i = 0 ; i < lines.length; ++ i) {\n\t\tconst [a, b, c] = lines[i];\n\n\t\tif(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n\t\t\treturn squares[a];\n\t} \n\treturn null;\n}","import React from 'react';\nimport Game from './Components/Game';\n\n\nconst App = () => <Game/>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}